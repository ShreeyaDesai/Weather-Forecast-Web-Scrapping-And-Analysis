# -*- coding: utf-8 -*-
"""Weather News (site 4).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jxsB7sRuI1zlu7o_mhd3bXSzXusdH8vM
"""

#LIMITATION: THE FIRST VALUE FOR High Temperature(in °) WILL BE -- EVENING ONWARDS, HENCE IT GIVES ERROR WHILE CONVERTING
# OUTPUT SAVED CURRENTLY IN DAY TIME (SEE IMAGE AND DATA FILE PROPERTIES FOR MORE DETAILS)
# Ran the code using GOOGLE COLAB

# Covered requirements: 
# It must pull data from the internet (typically webpages) 
# It must pull data from 5 different webpages (using pandas)-- This is 5th page 
# It must do some basic calculations on numerical data from 3 of those pages (mean, median, mode, min, max) 
# It must make use of your own methods where appropriate 
# It must produce at least 3 charts from 3 of those pages 
# It must save the data to a file 


# Covered Additional requirements 
# 1 of the webpages includes data which changes daily-- This is the 1st page  
# The 5 webpages are from 5 different websites 
# It does basic calculations on all 5 of those webpages 
# It uses BeautifulSoup on 1 of the webpages and parses the html-- This is the 4th page using bs4
# It produces 5 charts from all 5 of the webpages 
# It saves the charts in addition to the data, to image files 


import requests
from bs4 import BeautifulSoup
import pandas as pd
from io import StringIO
from google.colab import files
import matplotlib.pyplot as plt
import seaborn as sns
import warnings


warnings.filterwarnings("ignore")

sns.set(color_codes=True)

url = "https://weather.com/weather/tenday/l/3ae2cf6b0e4dc520aee4f3534652a3bc242ccf428742ae02bb82855c035b9aa0#detailIndex5"
response = requests.get(url)

soup = BeautifulSoup(response.content,"html.parser")

daily_forecast_dump = soup.find(class_="DailyForecast--DisclosureList--nosQS")

# printing headlines of the news page
def print_all_headlines(text):
    print("The Headlines of the news page are as follows:\n")
    all_headlines = soup.find_all(attrs={"class": "Ellipsis--ellipsis--3ADai"})
    for every_headline in all_headlines:
        print(every_headline.text)

print_all_headlines(response.text)
print("\n\n")

# scraping weather data in a table
items = soup.find_all("details",class_ = "DaypartDetails--DayPartDetail--2XOOV Disclosure--themeList--1Dz21")

day = [item.find(class_="DetailsSummary--daypartName--kbngc").get_text() for item in items]
temperature_high = [item.find(class_="DetailsSummary--highTempValue--3PjlX").get_text() for item in items]
temperature_low = [item.find(class_="DetailsSummary--lowTempValue--2tesQ").get_text() for item in items]
humidity = [item.find(class_="DetailsTable--value--2YD0-").get_text() for item in items]
wind = [item.find(class_="Wind--windWrapper--3Ly7c DailyContent--value--1Jers").get_text() for item in items]


df = pd.DataFrame({"Period" : day, "High Temperature" : temperature_high , "Low Temperature" : temperature_low, 
                   "Humidity" : humidity, "Wind" : wind })

#print, save and download table to CSV
print(df)
df.to_csv("weatherdata.csv")                                                    
files.download('weatherdata.csv')                                               



#modifying the table to remove the signs of degree and temperature to get only numbers in the table
modified_temperature_high = [item.find(class_="DetailsSummary--highTempValue--3PjlX").get_text().replace('°','') for item in items]
modified_temperature_low = [item.find(class_="DetailsSummary--lowTempValue--2tesQ").get_text().replace('°','') for item in items]
modified_humidity = [item.find(class_="DetailsTable--value--2YD0-").get_text().replace('%','') for item in items]
modified_wind = [item.find(class_="Wind--windWrapper--3Ly7c DailyContent--value--1Jers").get_text().replace('WNW','').replace('NW','').
                 replace('mph','').replace('W','').replace('N','').replace('WSW','').replace('SSE','')
                 .replace('S','').replace('E','').replace('SS','').replace('SE','') for item in items]


df_modified = pd.DataFrame({"Period" : day, "High Temperature(in °)" : modified_temperature_high , "Low Temperature(in °)" : modified_temperature_low, 
                   "Humidity(in %)" : modified_humidity, "Wind(in mph)" : modified_wind })

print("\n\n")

#print, save and download modified table to CSV
print(df_modified)
df_modified.to_csv("modified_weatherdata.csv")                                  
files.download('modified_weatherdata.csv')                                                                            



# Performing basic operations on the First Table 
print ("\n" + "The output of basic operations is: \n")
sum = df_modified.loc[:,"Humidity(in %)"].sum()
print("\nThe Sum value for the Humidity is:", sum)

maximum = df_modified.loc[:,"Humidity(in %)"].max()
print("\nThe Maximum value for Humidity is:", maximum)

mean = df_modified['Humidity(in %)'].mean()
print("\nThe Mean value of Humidity is: ", mean)

median = df_modified.loc[:,"Humidity(in %)"].median()
print("\nThe Median value for Humidity is:", median)

mode = df_modified.loc[:,"Humidity(in %)"].mode()
print("\nThe Mode value for Humidity is:", mode)

#converting the datatype in order to use the same in plotting
df_modified["Humidity(in %)"] = df_modified["Humidity(in %)"].astype(float)
df_modified["Wind(in mph)"] = df_modified["Wind(in mph)"].astype(float)
df_modified["High Temperature(in °)"] = df_modified["High Temperature(in °)"].astype(float)
df_modified["Low Temperature(in °)"] = df_modified["Low Temperature(in °)"].astype(float)


#plotting
plt.figure(figsize=(15,10))


#graph 1
sns.stripplot(df_modified['High Temperature(in °)'], df_modified['Period'], palette="Set2", size=25, marker="s", alpha=0.2)
plt.title("High Temperature Vs Period", fontsize = 20)
plt.savefig('graph4-1.png')                                                     
files.download('graph4-1.png')                                                  


#graph 2
sns.lmplot(x="Humidity(in %)", y="Wind(in mph)", data=df_modified)
plt.title("Humidity Vs Wind", fontsize = 15)
plt.savefig('graph4-2.png')                                                     
files.download('graph4-2.png')   


#graph 3
sns.pairplot(df_modified[['High Temperature(in °)', 'Wind(in mph)', 'Humidity(in %)']])
plt.title("Categorical plot of Humidity, Wind and Humidity", fontsize = 15)
plt.savefig('graph4-3.png')                                                     
files.download('graph4-3.png')